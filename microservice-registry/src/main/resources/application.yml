

# port와 host는 생략 가능하며, 생략시 유레카가 환경 변수를 참고하여 결정, 속성값을 확실히 하기 위해 지정하는 것이 좋다.

server:
  port: 8761

eureka:
  instance:
    hostname: localhost 
    
  client:
    fetchRegistry: false       # 다른 유레카 서버에서 레지스트리 정보를 가져오는지 여부 (기본값은 true)
    registerWithEureka: false  # 다른 유레카 서버의 서비스로 자신을 등록해야하는지 여부 (기본값은 true)
    serviceUrl:                # 개발시에는 다른 유레카 서버들이 필요 없으므로, 두 값을 false로 한다. (그래야 다른 유레카 서버들과 통신하려고 하지 않는다.)
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  
  # 유레카 서버는 서비스 인스턴스(유레카 서버의 클라이언트)가 자신을 등록하고, 등록 갱신 요청을 30초마다 전송하기를 기대한다.
  # 일반적으로 세번의 갱신 기간(90초)동안 서비스 인스턴스로부터 등록 갱신 요청을 받지 못하면 해당 서비스 인스턴스의 등록을 취소한다.
  # 이렇게 등록 취소되는 서비스의 수가 임계값을 초과하면 네트워크에 문제가 생긴 것으로 간주하고, 나머지 서비스 데이터를 보존하기 위해 자체-보존 모드가 된다.
  # 그 후에는 추가적인 서비스 인스턴스의 등록 취소가 방지된다.
  
  # 운영 환경(프로덕션 설정)에서는 자체-보존 모드를 true로 설장하는 것이 좋다.
  # 하지만 개발 환경에서는 서비스 인스턴스들의 상태가 자주 변경될 수 있기 때문에, 이 속성을 false로 하는 것이 유용하다. 
  server:
    enableSelfPreservation: false
      



# 개발시에는 단일 유레카 인스턴스가 편리하지만, 운영환경에서는 고가용성을 위해 최소한 두개의 유레카 인스턴스를 가져야한다.
# 두개 이상의 유레카 인스턴스를 구성하는 가장 쉽고 간단한 방법은 스프링 프로파일을 지정하고,
# 한번에 하나씩 프로파일을 사용해서 유레카를 두번 시작시키는 것이다.


# 다중 인스턴스를 가지는 유레카를 사용하려면 아래 주석을 해제하고, 위의 내용들을 주석처리한다.

#eureka:
#  client:
#    service-url:
#      defaultZone: http://${other.eureka.host}:${other.eureka.port}/eureka

---
spring:
  profiles: eureka-1
  application:
    name: eureka-1

server:
  port: 8761

eureka:
  instance:
    hostname: eureka1.tacocloud.com

other:
  eureka:
    host: localhost
    port: 8761

---
spring:
  profiles: eureka-2
  application:
    name: eureka-2

server:
  port: 8762

eureka:
  instance:
    hostname: eureka2.tacocloud.com

other:
  eureka:
    host: localhost
    port: 8762