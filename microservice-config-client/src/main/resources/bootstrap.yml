
spring:
  cloud:
    config:
      token: roottoken   # 지정된 토큰 값을 구성 서버에 대한 모든 요청에 포함하라고 구성 서버 클라이언트에 알려준다. (vault 토큰)
      
      
# 스프링 클라우드 구성 서버는 실행 중인 애플리케이션을 중단시키지 않고, 구성 속성을 리프레시하는 기능을 제공한다.
# 즉, 백엔드 Git Repo 또는 Vault 보안 서버에 변경 데이터가 푸시 되면, 애플리케이션의 각 마이크로서비스는 새로운 구성으로 즉시 리프레시한다.

# 이때 다음 중 한가지 방법을 사용한다.

# 수동식 : 구성 서버 클라이언트 (각 서비스)는 /actuator/refresh라는 액추에이터 엔드포인트를 활성화하고, 이 엔드포인트로 Post 요청시 가장 최근 구성을 가져온다.
# 자동식 : 리포지토리의 commit hook이 모든 서비스의 리프레시를 일으킨다. 이때 구성 서버와 클라이언트 간 통신을 위해 스프링 클라우드 버스가 개입한다.

# 수동식은 업데이트 시점을 정확히 제어할 수 있지만, 개별적인 HTTP 요청이 필요하고, 
# 자동식은 즉시 구성 변경을 적용하지만, 구성 리포지토리에 커밋시에 수행되므로 부담이 될 수 있다.


# 수동식으로 리프레시를 하기 위해서는 변경된 구성 속성을 가져올 서비스(실행중인 서비스)에 spring-boot-starter-actuator 의존성을 추가하고,
# Git Repo에 푸시된 구성 속성 변경시 , curl localhost:8080/actuator/refresh -X POST와 같이 엔드포인트를 호출하여, 리프레시한다.


# 자동식으로 리프레시하기 위해서는, 또 다른 스프링 클라우드 프로젝트인 스프링 클라우드 버스를 사용한다.
# 웹훅이 Git Repo에 생성되면, Push 되었을 때, Git Repo에 대한 변경이 생겼음을 구성 서버에 알려준다. (웹훅은 Github, Bitbucket 등에서 지원)
# 구성 서버는 RabbitMQ나 카프카와 같은 메시지 브로커를 통해 변경 관련 메시지를 전파함으로서 웹훅의 POST 요청에 반응한다.
# 알림을 구독하는 모든 구성서버 클라이언트 애플리케이션은 구성 서버로부터 받은 새로운 속성 값으로 자신의 속성을 리프레시하여 알림 메시지에 반응한다. 

# 구성 서버와 클라잉너트간 메시지 처리에 사용되는 메시지 브로커 필요, 웹훅이 Git Repo에 필요,
# 구성 서버는 구성 서버 모니터 의존성(Git Repo로부터 웹훅 요청을 처리하는 엔드포인트 제공) 활성화
# RabbitMQ나 카프카 스프링 클라우드 스트림 의존성 (속성 변경 메시지를 브로커에게 전송하기 위해) 활성화
# 메시지 브로커가 로컬에서 실행되는 것이 아니라면, 브로커에 연결하기 위한 세부 정보를 구성 서버와 모든 클라이언트에 구성
# 모든 클라이언트에 스프링 클라우드 버스 의존성 추가